import os
import pickle
from functools import partial

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import FormatStrFormatter

from safe_control_gym.envs.benchmark_env import Task
from safe_control_gym.experiments.base_experiment import BaseExperiment
from safe_control_gym.utils.configuration import ConfigFactory
from safe_control_gym.utils.registration import make
import tinympc

# 创建配置
CONFIG_FACTORY = ConfigFactory()
config = CONFIG_FACTORY.merge()

# 初始化 Safe Control Gym 环境
env_func = partial(make, config.task, **config.task_config)
env = env_func(gui='false')

# 定义 8 字形轨迹生成函数
def compute_figure8_trajectory(t, traj_period, scaling):
    traj_freq = 2.0 * np.pi / traj_period
    coords_a = scaling * np.sin(traj_freq * t)
    coords_b = scaling * np.sin(traj_freq * t) * np.cos(traj_freq * t)
    return coords_a, coords_b

# 参数设置
A = 1.0                  # 轨迹幅度
dt = 0.1                 # 时间步长
traj_period = 10.0       # 轨迹周期
NTOTAL = int(10 / dt)    # 总时间步数
theta = np.pi / 4        # 绕 x 轴旋转角度（45°）
cos_theta = np.cos(theta)
sin_theta = np.sin(theta)

# 初始化参考轨迹数组
Xref = np.zeros((NTOTAL, 6))  # 6 表示状态维度 [x, y, z, x_dot, y_dot, z_dot]

# 生成 8 字形轨迹
for i in range(NTOTAL):
    t = i * dt

    # 计算 8 字形轨迹坐标
    x, y = compute_figure8_trajectory(t, traj_period, A)
    z = 0.5  # 固定高度

    # 绕 x 轴旋转变换
    x_rot = x
    y_rot = cos_theta * y - sin_theta * z
    z_rot = sin_theta * y + cos_theta * z

    # 填充参考轨迹数组
    Xref[i, 0] = x_rot  # x'
    Xref[i, 1] = y_rot  # y'
    Xref[i, 2] = z_rot  # z'
    # 假设速度为零
    Xref[i, 3:6] = 0.0

# 初始化 TinyMPC
NSTATES = 6  # 状态维度: [x, y, z, x_dot, y_dot, z_dot]
NINPUTS = 4  # 输入维度
NHORIZON = 10  # 预测步长

Adyn = np.array([
    [1.0, 0.0, 0.0, 0.0, 0.245250, 0.0],
    [0.0, 1.0, 0.0, -0.245250, 0.0, 0.0],
    [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
])

Bdyn = np.array([
    [-0.07069, 0.07773, 0.07091, -0.07795],
    [0.07034, 0.07747, -0.07042, -0.07739],
    [0.0052554, 0.0052554, 0.0052554, 0.0052554],
    [-0.1720966, -0.1895213, 0.1722891, 0.1893288],
    [-0.1729419, 0.1901740, 0.1734809, -0.1907131],
    [0.0123423, -0.0045148, -0.0174024, 0.0095748]
])

Q = np.diag([1, 1, 1, 0.1, 0.1, 0.1])
R = np.diag([0.1, 0.1, 0.1, 0.1])
u_min = np.array([-0.5, -0.5, -0.5, -0.5])
u_max = np.array([0.5, 0.5, 0.5, 0.5])
x_min = np.array([-5.0] * NSTATES)
x_max = np.array([5.0] * NSTATES)

# 初始化 TinyMPC
prob = tinympc.TinyMPC()
prob.setup(A=Adyn,
           B=Bdyn,
           Q=Q,
           R=R,
           N=NHORIZON,
           u_min=u_min,
           u_max=u_max,
           x_min=x_min,
           x_max=x_max)

# 初始状态
x0 = np.ravel(Xref[0, :NSTATES])  # 取前 6 个状态变量
if len(x0) != NSTATES:
    raise ValueError(f"x0 dimension mismatch: expected {NSTATES}, got {len(x0)}")

# 仿真主循环
trajectory = []
control_inputs = []

for t in range(len(Xref) - NHORIZON):
    print(f"Step {t}, x0: {x0}")

    # 设置当前状态
    prob.set_x0(x0)

    # 设置参考轨迹
    xref_horizon = Xref[t:t + NHORIZON].T
    prob.set_x_ref(xref_horizon)

    # 求解控制
    solution = prob.solve()

    # 提取控制输入
    controls = solution["controls"]
    
    print("controls: ", controls)
    #control_inputs.append(controls)
    
    if controls.ndim == 1:
        u = controls
    else:
        u = controls[:, 0]
    control_inputs.append(u.copy())## deep copy

    # 更新状态
    x0 = Adyn @ x0 + Bdyn @ u
    trajectory.append(x0)


print("control_inputs: ",control_inputs)
# 转化为 NumPy 数组
trajectory = np.array(trajectory)
control_inputs = np.array(control_inputs)


# 绘制轨迹
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# 画参考轨迹
ax.plot(Xref[:, 0], Xref[:, 1], Xref[:, 2], label='Reference Trajectory', linestyle='--', color='r')

# 画实际轨迹
ax.plot(trajectory[:, 0], trajectory[:, 1], trajectory[:, 2], label='Actual Trajectory', linestyle='-')

ax.set_title('3D Trajectory')
ax.set_xlabel('X Position')
ax.set_ylabel('Y Position')
ax.set_zlabel('Z Position')
ax.legend()

# 绘制控制输入
# 计算物理时间
time_steps = np.arange(len(control_inputs)) * dt

plt.figure(figsize=(10, 6))
for i in range(NINPUTS):
    plt.plot(time_steps, control_inputs[:, i], label=f'Control Input {i+1}')

plt.title('Control Inputs Over Time')
plt.xlabel('Time (s)')
plt.ylabel('Control Inputs')
plt.legend()
plt.grid(True)
plt.tight_layout()

plt.show()
